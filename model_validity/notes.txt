
# rasterize the shape file and obtain the geoid for every state
# - rasterizing
gdal_rasterize -a GEOID -te -180 -90 180 90 -tr 0.08333333333333333333333333333333333333333333333333333333333333333333333 0.08333333333333333333333333333333333333333333333333333333333333333333333 tl_2021_us_state.shp tl_2021_us_state_geoid_5min.tif
# - convert it to a PCRaster map file (scalar)
gdal_translate -of PCRaster tl_2021_us_state_geoid_5min.tif tl_2021_us_state_geoid_5min_scalar.map
# - remove xml file as we do not need it
rm *.xml
# - convert to a nominal map
pcrcalc tl_2021_us_state_geoid_5min.map = "if(tl_2021_us_state_geoid_5min_scalar.map gt 0.0 , nominal(tl_2021_us_state_geoid_5min_scalar.map))"

# get conus area
pcrcalc clump_tl_2021_us_state_geoid_5min.map = "clump(defined(tl_2021_us_state_geoid_5min.map))"
 aguila clump_tl_2021_us_state_geoid_5min.map
pcrcalc conus.map = "if(clump_tl_2021_us_state_geoid_5min.map eq 38, boolean(1.0))"

# xcoordinate and ycoordinate maps
pcrcalc xcoordinate.map = "xcoordinate(defined(tl_2021_us_state_geoid_5min.map))"
pcrcalc ycoordinate.map = "ycoordinate(defined(tl_2021_us_state_geoid_5min.map))"

# xmax, ymax, ymin and xmin maps
pcrcalc xmax_states.map = "areamaximum(xcoordinate.map, tl_2021_us_state_geoid_5min.map)"
pcrcalc ymax_states.map = "areamaximum(ycoordinate.map, tl_2021_us_state_geoid_5min.map)"
pcrcalc ymin_states.map = "areaminimum(ycoordinate.map, tl_2021_us_state_geoid_5min.map)"
pcrcalc xmin_states.map = "areaminimum(xcoordinate.map, tl_2021_us_state_geoid_5min.map)"

# western us, but excluding Alaska and Hawaii
pcrcalc western_us.map = "if(xmin_states.map gt -126, if(xmax_states.map lt -100, boolean(1.0)))"
# PS: the 13 Western states, including Alaska (AK) and Hawaii (HI) are: AK, AZ, CA, CO, HI, ID, MT, NV, NM, OR, UT, WA, and WY

# northeastern states are: CT, ME, MA, NH, NJ, NY, PA, RI, and VT.
pcrcalc north_eastern_us.map = "if(xmin_states.map gt -81, if(ymin_states.map gt 38.737, boolean(1.0)))"
pcrcalc north_eastern_us_states.map = "if(north_eastern_us.map, tl_2021_us_state_geoid_5min.map)"
# remove DC
pcrcalc north_eastern_us_states.map = "if(north_eastern_us_states.map ne 11, tl_2021_us_state_geoid_5min.map)"

# validity greater than zero 
pcrcalc validity_simple_gt_zero.map = "if(validity_simple.map gt 0, boolean(1.0))"


# conus
pcrcalc maptotal_conus.map = "maptotal(if(conus.map, cellsize05min.correct.map))"
pcrcalc maptotal_conus_valid_simple.map = "maptotal(if(conus.map, if(validity_simple_gt_zero.map, cellsize05min.correct.map)))"

sutan101@node032.cluster:/eejit/home/sutan101/github/edwinkost/tritium/model_validity$ mapattr -p maptotal_conus*.map
mapattr version: 4.4.0 (linux/x86_64)
attributes  maptotal_conus.map maptotal_conus_valid_simple.map
rows        2160               2160
columns     4320               4320
cell_length 0.0833333          0.0833333
data_type   scalar             scalar
cell_repr   single             single
projection  yb2t               yb2t
angle(deg)  0                  0
xUL         -180               -180
yUL         90                 90
min_val     8.08691e+12        3.04705e+12
max_val     8.08691e+12        3.04705e+12
version     2                  2
file_id     0                  0
native      y                  y
attr_tab    n                  n
(pcrglobwb_python3_2022-10-17)
sutan101@node032.cluster:/eejit/home/sutan101/github/edwinkost/tritium/model_validity$ python
Python 3.10.6 | packaged by conda-forge | (main, Aug 22 2022, 20:35:26) [GCC 10.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 3.04705e+12 / 8.08691e+12
0.37678792023158414

# get some stats (median and IQR) for 
pcrcalc validity_simple_conus_gt_zero_only.map = "if(conus.map, if(validity_simple_gt_zero.map, validity_simple.map))"
pcrcalc validity_north_eastern_us_conus_gt_zero_only.map = "if(defined(north_eastern_us_states.map), if(validity_simple_gt_zero.map, validity_simple.map))"
pcrcalc validity_western_us_conus_gt_zero_only.map = "if(defined(western_us.map), if(validity_simple_gt_zero.map, validity_simple.map))"

import pcraster as pcr
import numpy as np

map = pcr.readmap("validity_simple_conus_gt_zero_only.map")
np_values = pcr.pcr2numpy(map, 1e20)
mask = np_values < 1e20
np_values = np_values[mask]
np.median(np_values)
np.quantile(np_values, 0.75) - np.quantile(np_values, 0.25)
>>> np.median(np_values)
25.910164
>>> np.quantile(np_values, 0.75) - np.quantile(np_values, 0.25)
35.41327929496765

map = pcr.readmap("validity_north_eastern_us_conus_gt_zero_only.map")
np_values = pcr.pcr2numpy(map, 1e20)
mask = np_values < 1e20
np_values = np_values[mask]
np.median(np_values)
np.quantile(np_values, 0.75) - np.quantile(np_values, 0.25)
>>> np.median(np_values)
25.892141
>>> np.quantile(np_values, 0.75) - np.quantile(np_values, 0.25)
19.7247257232666

map = pcr.readmap("validity_western_us_conus_gt_zero_only.map")
np_values = pcr.pcr2numpy(map, 1e20)
mask = np_values < 1e20
np_values = np_values[mask]
np.median(np_values)
np.quantile(np_values, 0.75) - np.quantile(np_values, 0.25)
>>> np.median(np_values)
42.38822
>>> np.quantile(np_values, 0.75) - np.quantile(np_values, 0.25)
39.59140968322754


# 
